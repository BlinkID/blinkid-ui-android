apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.github.dcendents.android-maven'

group='com.github.BlinkID'

ext.altDependencyProperty = "ALTERNATIVE_BLINK_ID_DEPENDENCY"
ext.isAltDependencyProjectProperty = "IS_ALTERNATIVE_BLINK_ID_DEPENDENCY_PROJECT"

ext.missingDimensionProperty = "MISSING_DIMENSION"
ext.missingDimensionRequestedValueProperty = "MISSING_DIMENSION_REQUESTED_VALUE"

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        if (project.hasProperty(missingDimensionProperty)) {
            missingDimensionStrategy project.property(missingDimensionProperty), project.property(missingDimensionRequestedValueProperty)
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        distribute {
            minifyEnabled false
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
}

ext.kotlin_version = '1.3.10'
ext.appCompatVersion = "28.0.0"

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    if (isBlinkIdDependencyProject()) {
        implementation project(getBlinkIdDependency())
    } else {
        api(getBlinkIdDependency()) {
            transitive = true
        }
    }
}

String getBlinkIdDependency() {
    if (project.hasProperty(altDependencyProperty)) {
        return project.property(altDependencyProperty)
    } else {
        return "com.microblink:blinkid:4.11.0@aar"
    }
}

boolean isBlinkIdDependencyProject() {
    if (project.hasProperty(altDependencyProperty)
            && project.hasProperty(isAltDependencyProjectProperty)) {
        return project.property(isAltDependencyProjectProperty).toBoolean()
    } else {
        return false
    }
}
